const express = require("express");
const sqlite3 = require("sqlite3").verbose();
const cors = require("cors");
const path = require("path");
const session = require("express-session");

const app = express();
const db = new sqlite3.Database("./database.db");

app.use(cors());
app.use(express.json());
app.use(express.static(path.join(__dirname, "public")));
app.use(session({
  secret: "loja_roupas_secret",
  resave: false,
  saveUninitialized: true
}));

// Criação da tabela de usuários (se não existir)
db.run(`CREATE TABLE IF NOT EXISTS users (
  id INTEGER PRIMARY KEY AUTOINCREMENT,
  name TEXT NOT NULL,
  email TEXT NOT NULL UNIQUE,
  password TEXT NOT NULL
)`);

// Middleware de autenticação
function isAuthenticated(req, res, next) {
  if (req.session.userId) {
    next();
  } else {
    res.status(401).json({ error: "Não autenticado" });
  }
}

// Validação de usuário
function validateUser({ name, email, password }) {
  const errors = [];
  if (!name || name.trim().length < 3) errors.push("Nome deve ter pelo menos 3 caracteres.");
  if (!email || !/^[\w-.]+@[\w-]+\.[a-z]{2,}$/i.test(email)) errors.push("E-mail inválido.");
  if (!password || password.length < 4) errors.push("Senha deve ter pelo menos 4 caracteres.");
  return errors;
}

// Login
app.post("/api/login", (req, res) => {
  const { email, password } = req.body;
  db.get("SELECT * FROM users WHERE email = ? AND password = ?", [email, password], (err, user) => {
    if (err) return res.status(500).json({ error: err.message });
    if (!user) return res.status(401).json({ error: "E-mail ou senha inválidos." });
    req.session.userId = user.id;
    res.json({ id: user.id, name: user.name, email: user.email });
  });
});

// Logout
app.post("/api/logout", (req, res) => {
  req.session.destroy(() => {
    res.json({ success: true });
  });
});

// Listar usuários (protegido)
app.get("/api/users", isAuthenticated, (req, res) => {
  db.all("SELECT id, name, email FROM users ORDER BY id DESC", [], (err, rows) => {
    if (err) return res.status(500).json({ error: err.message });
    res.json(rows);
  });
});

// Criar usuário (protegido)
app.post("/api/users", isAuthenticated, (req, res) => {
  const { name, email, password } = req.body;
  const errors = validateUser({ name, email, password });
  if (errors.length) return res.status(400).json({ error: errors.join(" ") });
  db.run("INSERT INTO users (name, email, password) VALUES (?, ?, ?)", [name, email, password], function (err) {
    if (err) return res.status(400).json({ error: err.message });
    res.json({ id: this.lastID, name, email });
  });
});

// Atualizar usuário (protegido)
app.put("/api/users/:id", isAuthenticated, (req, res) => {
  const { name, email, password } = req.body;
  const errors = validateUser({ name, email, password });
  if (errors.length) return res.status(400).json({ error: errors.join(" ") });
  db.run("UPDATE users SET name = ?, email = ?, password = ? WHERE id = ?", [name, email, password, req.params.id], function (err) {
    if (err) return res.status(400).json({ error: err.message });
    res.json({ id: req.params.id, name, email });
  });
});

// Deletar usuário (protegido)
app.delete("/api/users/:id", isAuthenticated, (req, res) => {
  db.run("DELETE FROM users WHERE id = ?", [req.params.id], function (err) {
    if (err) return res.status(400).json({ error: err.message });
    res.json({ success: true });
  });
});

// Rotas para servir as páginas
app.get("/", (req, res) => {
  res.sendFile(path.join(__dirname, "public", "index.html"));
});
app.get("/crud.html", (req, res) => {
  res.sendFile(path.join(__dirname, "public", "crud.html"));
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Servidor rodando em http://localhost:${PORT}`);
});
